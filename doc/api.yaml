openapi: 3.0.2
servers:
  - url: /v1
info:
  description: |-
    Each user will be presented with a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time  and how many likes and comments it has. The stream is composed by photos from “following” (other users that the user follows).
    
    Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any image (even those uploaded by themself).
    
    Only authors can remove their comments.Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about Alice. Alice can decide to remove the ban at any moment.Users will have their profiles. 
    
    The personal profile page for the user shows: the user’s photos (in reverse chronological order), how many photos have been uploaded, and the user’s followers and following. Users can change their usernames, upload photos, remove photos, and follow/unfollow other users.
    
    Removal of an image will also remove likes and comments.A user can search other user profiles via username. A user can log in just by specifying the username. See the “Simplified login” section for details.
    operations availables:
    
    (Mandatory)
    - doLogin (see simplified login)
    - setMyUserName
    - uploadPhoto
    - followUser
    - unfollowUser
    - banUser
    - unbanUser
    - likePhoto
    - unlikePhoto
    - commentPhoto
    - uncommentPhoto
    - deletePhoto
    - getUserProfile
    - getMyStream
    
    
    Some useful links:
    - [project spec ](http://gamificationlab.uniroma1.it/notes/Project.pdf)
  version: 0.0.1
  title: WASAPhoto
  termsOfService: 'UtEoT'
  contact:
    email: merlini.1166162@studenti.uniroma1.it
tags:
  - name: user
    description: Operations for the user
  - name: photo
    description: Operations on the photos
  - name: follow
    description: follow/unfollow operations
  - name: ban
    description: ban/unban operations
  - name: comment
    description: put or remove a comment
  - name: like
    description: like/unlike photo Opration

paths:
  /session:
    post:
      tags:
        - user
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description:  |-
                    username description
                  type: string
                  example: |-
                    Veniero
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: the success log response
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: |-
                      abcdef012345
  /home/{username}:
    parameters:
      - in: path
        name: username
        description: |-
          the username of the user to retrieve
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          example:  |-
            theUserName
          minLength: 3
          maxLength: 16
      - in: header
        name: X-user-session-identifier
        description: |-
          session identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example:  |-
            theUserName
    get:
      tags:
        - user
      summary: get user stream
      description: |-
        Get the "stream" data of the user. The "stream" is  a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time and how many likes and comments it has. The stream is composed by photos from "following" (other users that the user follows).
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: getMyStream
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserHomePage'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if the user has been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /users:
    parameters:
      - in: header
        name: X-user-session-identifier
        description:  |-
          session identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          example:  |-
            theUserInSession
    get:
      tags:
        - user
      summary: find all users
      description: |-
        find all user in the database, including the requestor user. 
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: findAllUser
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 999999
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /users/{username}:
    parameters:
      - in: path
        name: username
        description: the username of the user to retrieve
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
          example:  |-
            theUserName
      - in: header
        name: X-user-session-identifier
        description:  |-
          session identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example:  |-
            theUserInSession
    get:
      tags:
        - user
      summary: find a user profile
      description: |-
        Recover the profile of the current user.
        Only the requestor has the grant to invoke this api.
        Only json media type is supported.
      operationId: getUserProfile
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if the user has been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
        - user
      summary: update username
      description: |-
        Replace the current user's username with the provided one.
        Only the requestor has the grant to invoke this api.
        Only json media type is supported.
      operationId: setMyUserName
      requestBody:
        description: The user object containing the username that will be replaced
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if the user has been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /photos:
    parameters:
      - in: query
        name: username
        description: the username of the user to retrieve
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          example:  |-
            theUser
          minLength: 3
          maxLength: 16
      - in: header
        name: X-user-session-identifier
        description: |-
          session identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example: |-
            theUserInSession
    get:
      tags:
        - photo
      summary: find all user's photos
      description: |-
        Find all the photo of a specified user.
        If a user has no photo, an empty array is responded.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: findUserPhotos
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 999999
                items:
                  $ref: '#/components/schemas/Photo'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if the user has been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
        - photo
      summary: upload new photo
      description: |-
        Add a new photo in photo collection of the user and the created object is responded to the client.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: uploadPhoto
      requestBody:
        description: Uploaded photo
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: |-
                    file to upload
                  type: string
                  format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if the user has been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /photos/{photoId}:
    parameters:
      - in: query
        name: username
        description: |-
          the username of the user
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
          example: |-
            theUser
      - in: path
        name: photoId
        description: |-
          the photo id
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 1
          maxLength: 32
          example: |-
            10
      - in: header
        name: X-user-session-identifier
        description: |-
          session identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example: |-
            theUserInSession
    get:
      tags:
        - photo
      summary: find photo
      description: |-
        Retrieve a particular photo of a user (if exist both the user and the photo).
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: findUserPhoto
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if either the user or the photo have been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
        - photo
      summary: remove a photo of a user
      description: |-
        Remove a user photo. 
        This api is idempotent.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: deletePhoto
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyReponse'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /follows:
    parameters:
      - in: query
        name: username
        description: |-
          the username
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
          example: |-
            theUser
      - in: header
        description: |-
          session identifier
        name: X-user-session-identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example: |-
            theUserInSession
    post:
      tags:
        - follow
      summary: follow another user
      description: |-
        Start following the activities of another user.
        If the API succeed, a newly create "Follow" object is responded to the client.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: followUser
      requestBody:
        description: The followee that the user wants to follow
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if the user has been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /follows/{followId}:
    parameters:
      - in: path
        name: followId
        description: |-
          the follow id to be deleted
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          example: |-
            10
          minLength: 1
          maxLength: 32
      - in: query
        name: username
        description: |-
          the username
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
          example: |-
            theUser
      - in: header
        description: |-
          session identifier
        name: X-user-session-identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example: |-
            theUserInSession
    delete:
      tags:
        - follow
      summary: unfollow another user
      description: |-
        Stop following the activities of another user.
        This api is idempotent.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: unfollowUser
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyReponse'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if the following user has been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /bans:
    parameters:
      - in: query
        name: username
        description: |-
          the username of the user to retrieve
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
          example: |-
            theUser
      - in: header
        description: |-
          session identifier
        name: X-user-session-identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example: |-
            theUserInSession
    post:
      tags:
        - ban
      summary: ban another user
      description: |-
        Ban Another User.
        If the API succeed, the newly (or the previous) "Ban" object is responded to the client.
        This api is idempotent.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: banUser
      requestBody:
        description: The followee that the user wants to follow
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ban'
      responses:
        '201':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ban'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if the banning user has been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /bans/{banId}:
    parameters:
      - in: path
        name: banId
        description: |-
          the ban id to be deleted
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 1
          maxLength: 32
          example: |-
            10
      - in: query
        name: username
        description: |-
          the username of the user to retrieve
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
          example: |-
            theUser
      - in: header
        description: |-
          session identifier
        name: X-user-session-identifier
        schema:
          type: string
          minLength: 3
          maxLength: 180
          pattern:  '^[a-zA-Z0-9_.-]*$'
          example: |-
            theUserInSession
    delete:
      tags:
        - ban
      summary: remove an user from banlist
      description: |-
        Remove an user from banlist.
        This api is idempotent.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: unbanUser
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyReponse'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /likes:
    parameters:
      - in: query
        name: username
        description: the username of the user
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
          example: |-
            theUser
      - in: query
        name: photoId
        description: the photo id
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 1
          maxLength: 32
          example: |-
            10
      - in: header
        description: |-
          session identifier
        name: X-user-session-identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example: |-
            theUserInSession
    post:
      tags:
        - like
      summary: like a user photo
      description: |-
        Like a photo a user (if both the user and the photo exist). 
        This api is idempotent.
        If the API succeed, the newly (or previously created) "Like" object is responded to the client.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: likePhoto
      requestBody:
        description: The user that issue a like on the photo of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if either the user or the photo have been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /likes/{likeId}:
    parameters:
      - in: query
        name: username
        description: |-
          the username of the user
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
          example: |-
            theUser
      - in: query
        name: photoId
        description: |-
          the photo id
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 1
          maxLength: 32
          example: |-
            11
      - in: path
        name: likeId
        description: the like id
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 1
          maxLength: 32
          example: |-
            10
      - in: header
        description: |-
          session identifier
        name: X-user-session-identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example: |-
            theUserInSession
    delete:
      tags:
        - like
      summary: remove a like to a photo of a user
      description: |-
        Remove the "Like" from  a user photo. 
        This api is idempotent.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: unlikePhoto
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyReponse'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /comments:
    parameters:
      - in: query
        name: username
        description: the username of the user
        required: true
        schema:
          type: string
          pattern: '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
          example: |-
            theUser
      - in: query
        name: photoId
        description: |-
          the photo id
        required: true
        schema:
          type: string
          pattern: '^[a-zA-Z0-9_.-]*$'
          minLength: 1
          maxLength: 32
          example: |-
            10
      - in: header
        description: |-
          session identifier
        name: X-user-session-identifier
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example: |-
            theUserInSession
    post:
      tags:
        - comment
      summary: add a comment to a photo of a user
      description: |-
        Comment a user photo.
        If the API succeed, the newly "Comment" object is responded to the client.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: commentPhoto
      requestBody:
        description: The user that issue a like on the photo of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found
          # this error could happen if either the user or the photo have been canceled before invoking this api
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /comments/{commentId}:
    parameters:
      - in: query
        name: username
        description: |-
          the username of the user
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
          example: |-
            theUser
      - in: query
        name: photoId
        description: |-
          the photo id
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 1
          maxLength: 32
          example: |-
            11
      - in: path
        name: commentId
        description: the comment id
        required: true
        schema:
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 1
          maxLength: 32
          example: |-
            10
      - in: header
        name: X-user-session-identifier
        schema:
          description: |-
            session identifier
          type: string
          pattern:  '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
          example:  |-
            theUserInSession
    delete:
      tags:
        - comment
      summary: remove a comment to a photo of a user
      description: |-
        Remove a Comment from a user photo.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: uncommentPhoto
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyReponse'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    User:
      description: it represents a user of the WASAPhoto Social Network
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.User
      properties:
        username:
          description: the username of the user, it is unique
          type: string
          example: |-
            theUser
          pattern: '^[a-zA-Z0-9_.-]*$'
      type: object
    Followee:
      description: it represents a followed user
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Followee
      properties:
        username:
          description: the username of the user, it is unique
          type: string
          example: |-
            theFollowedUser
          pattern: '^[a-zA-Z0-9_.-]*$'
      type: object
    Banned:
      description: Schema representing a banned user.
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Banned
      properties:
        username:
          description: the username of the user, it is unique
          type: string
          example: |-
            theBanneduser
          pattern: '^[a-zA-Z0-9_.-]*$'
      type: object
    Photo:
      description: it represents a photo uploaded by a user
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Photo
      properties:
        id:
          description: the photo id
          type: integer
          format: int64
          example: |-
            1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        likes:
          description: the likes received for this photo
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Like'
        comments:
          description: the comments received for this photo
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Comment'
        data:
          description: base64 data photo
          pattern:  '^[a-zA-Z0-9_.-]*$'
          example: |-
            iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAB
          type: string
          format: byte
        uploadDate:
          description: the upload date for this photo
          pattern: '^[a-zA-Z0-9_.-]*$'
          example: |-
            01-01-2022
          type: string
          format: date-time
      type: object
    Profile:
      description: it represents the profile data of user. It contains not public informations
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Profile
      properties:
        id:
          description: the profile id
          type: integer
          format: int64
          example: |-
            1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        photos:
          description: the photos of the user
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Photo'
        followees:
          description: the users that follows the user
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Follow'
        followers:
          description: the user's followers
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Follow'
      type: object
    UserHomePage:
      description: it represents the data . It contains not public informations
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.UserHomePage
      properties:
        id:
          description: the homepage id
          type: integer
          format: int64
          example: |-
            1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        photos:
          description: the photos beloning to the user's followees
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Photo'
        followees:
          description: the user followees
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Follow'
      type: object
    Like:
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Like
      properties:
        id:
          description: the like id
          type: integer
          format: int64
          example: |-
            1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        photo:
          $ref: '#/components/schemas/Photo'
      type: object
    Comment:
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Comment
      properties:
        id:
          description: the comment id
          type: integer
          format: int64
          example: |-
            1234
          minimum: 1
          maximum: 999999
        text:
          type: string
          pattern: '^[a-zA-Z0-9_.-]*$'
          minLength: 1
          maxLength: 999
          example: |-
            U R GORGEOUS!
        user:
          $ref: '#/components/schemas/User'
        photo:
          $ref: '#/components/schemas/Photo'
      type: object
    Ban:
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Ban
      description: it represents a Ban, a user banning another user
      properties:
        id:
          description: the ban id
          type: integer
          format: int64
          example: |-
            1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        banned:
          $ref: '#/components/schemas/Banned'
      type: object
    Follow:
      description: it represents a Follow, a user following another user
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Follow
      properties:
        id:
          description: the follow id
          type: integer
          format: int64
          example: |-
            1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        followee:
          $ref: '#/components/schemas/Followee'
      type: object
    EmptyReponse:
      description: it represents an empty response, used for delete api
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.EmptyResponse
      type: object
    ApiError:
      description: it represents the response used in case of errors
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.ApiError
      properties:
        id:
          description: the error code
          type: integer
          enum:
            - 400
            - 401
            - 404
            - 405
            - 415
        message:
          type: string
          example: |-
            error!
      type: object
