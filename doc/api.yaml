openapi: 3.0.2
servers:
  - url: /v1
info:
  description: |-
    Each user will be presented with a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time  and how many likes and comments it has. The stream is composed by photos from “following” (other users that the user follows).
    Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any image (even those uploaded by themself).
    
    Only authors can remove their comments.Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about Alice. Alice can decide to remove the ban at any moment.Users will have their profiles. 
    
    The personal profile page for the user shows: the user’s photos (in reverse chronological order), how many photos have been uploaded, and the user’s followers and following. Users can change their usernames, upload photos, remove photos, and follow/unfollow other users.
    
    Removal of an image will also remove likes and comments.A user can search other user profiles via username. A user can log in just by specifying the username. See the “Simplified login” section for details.
    operations availables:
    
    (Mandatory)
    - doLogin (see simplified login)
    - setMyUserName
    - uploadPhoto
    - followUser
    - unfollowUser
    - banUser
    - unbanUser
    - likePhoto
    - unlikePhoto
    - commentPhoto
    - uncommentPhoto
    - deletePhoto
    - getUserProfile
    - getMyStream
    
    Some useful links:
    - [project spec ](http://gamificationlab.uniroma1.it/notes/Project.pdf)
  version: 0.0.1
  title: WASAPhoto
  termsOfService: 'UtEoT'
  contact:
    email: merlini.1166162@studenti.uniroma1.it
tags:
  - name: user
    description: Operations for the user
  - name: photo
    description: Operations on the photos
  - name: follow
    description: follow/unfollow operations
  - name: ban
    description: ban/unban operations
  - name: comment
    description: put or remove a comment
  - name: like
    description: like/unlike photo Opration

paths:
  /session:
    post:
      tags:
        - user
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description:  |-
                login response description
              type: object
              properties:
                name:
                  description:  |-
                    user name
                  type: string
                  example: |-
                    Veniero
                  pattern:  '^[a-zA-Z0-9_.-]*$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulLogin'
  /home/{username}:
    parameters:
      - $ref: '#/components/parameters/usernamePathParam'
      - $ref: '#/components/parameters/X-user-session-identifier'
    get:
      tags:
        - user
      summary: get user stream
      description: |-
        Get the "stream" data of the user. The "stream" is  a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time and how many likes and comments it has. The stream is composed by photos from "following" (other users that the user follows).
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: getMyStream
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: '#/components/responses/200UserHomePage'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
  /users:
    parameters:
      - $ref: '#/components/parameters/X-user-session-identifier'
    get:
      tags:
        - user
      summary: find all users
      description: |-
        find all user in the database, including the requestor user. 
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: findAllUser
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: '#/components/responses/200Users'}
        '401': {$ref: '#/components/responses/401'}
        '405': {$ref: '#/components/responses/405'}
        '415': {$ref: '#/components/responses/415'}
  /users/{username}:
    parameters:
      - $ref: '#/components/parameters/usernamePathParam'
      - $ref: '#/components/parameters/X-user-session-identifier'
    get:
      tags:
        - user
      summary: find a user profile
      description: |-
        Recover the profile of the current user.
        Only the requestor has the grant to invoke this api.
        Only json media type is supported.
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: '#/components/responses/200Profile'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
    put:
      tags:
        - user
      summary: update username
      description: |-
        Replace the current user's username with the provided one.
        Only the requestor has the grant to invoke this api.
        Only json media type is supported.
      operationId: setMyUserName
      security:
        - bearerAuth: []
      requestBody:
        description: The user object containing the username that will be replaced
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200': {$ref: '#/components/responses/200Profile'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
  /photos:
    parameters:
      - $ref: '#/components/parameters/X-user-session-identifier'
    get:
      tags:
        - photo
      summary: find all user's photos
      description: |-
        Find all the photo of a specified user.
        If a user has no photo, an empty array is responded.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: findUserPhotos
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: '#/components/responses/200Photos'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
    post:
      tags:
        - photo
      summary: upload new photo
      description: |-
        Add a new photo in photo collection of the user and the created object is responded to the client.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: uploadPhoto
      security:
        - bearerAuth: []
      requestBody:
        description: Uploaded photo form
        required: true
        content:
          multipart/form-data:
            schema:
              description:  |-
                photo to be uploaded
              type: object
              properties:
                username:
                  description: |-
                    username uploading
                  type: string
                  pattern:  '^[a-zA-Z0-9_.-]*$'
                  minLength: 3
                  maxLength: 16
                file:
                  description: |-
                    file to upload
                  type: string
                  minLength: 0
                  maxLength: 999999999999
                  format: binary
      responses:
        '201': {$ref: '#/components/responses/201Photo'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
  /photos/{photoId}:
    parameters:
      - $ref: '#/components/parameters/photoIdPathParam'
      - $ref: '#/components/parameters/X-user-session-identifier'
    get:
      tags:
        - photo
      summary: find photo
      description: |-
        Retrieve a particular photo of a user (if exist both the user and the photo).
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: findUserPhoto
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: '#/components/responses/200Photo'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
    delete:
      tags:
        - photo
      summary: remove a photo of a user
      description: |-
        Remove a user photo. 
        This api is idempotent.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: deletePhoto
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: '#/components/responses/200Empty'}
        '401': {$ref: '#/components/responses/401'}
        '415': {$ref: '#/components/responses/415'}
  /follows:
    parameters:
      - $ref: '#/components/parameters/usernameQueryParam'
      - $ref: '#/components/parameters/X-user-session-identifier'
    get:
      tags:
        - follow
      summary: find all follow relation
      description: |-
        recover all the follow relations available, it can be filtered by user
      responses:
        '200': {$ref: '#/components/responses/200Follows'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
    post:
      tags:
        - follow
      summary: create a new follow relations
      description: |-
        Start following the activities of another user.
        If the API succeed, a newly create "Follow" object is responded to the client.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: followUser
      security:
        - bearerAuth: []
      requestBody:
        description: The followee that the user wants to follow
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowRequest'
      responses:
        '201': {$ref: '#/components/responses/201Follow'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}

  /follows/{followId}:
    parameters:
      - $ref: '#/components/parameters/usernameQueryParam'
      - $ref: '#/components/parameters/X-user-session-identifier'
      - $ref: '#/components/parameters/followId'
    delete:
      tags:
        - follow
      summary: unfollow another user
      description: |-
        Stop following the activities of another user.
        This api is idempotent.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: unfollowUser
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: '#/components/responses/200Empty'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
  /bans:
    parameters:
      - $ref: '#/components/parameters/usernameQueryParam'
      - $ref: '#/components/parameters/X-user-session-identifier'
    get:
      tags:
        - ban
      summary: find all ban relation
      description: |-
        recover all the ban relations available, it can be filtered by user
      responses:
        '200': {$ref: '#/components/responses/200Bans'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
    post:
      tags:
        - ban
      summary: ban another user
      description: |-
        Ban Another User.
        If the API succeed, the newly (or the previous) "Ban" object is responded to the client.
        This api is idempotent.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: banUser
      security:
        - bearerAuth: []
      requestBody:
        description: The followee that the user wants to follow
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanRequest'
      responses:
        '201': {$ref: '#/components/responses/201Ban'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
  /bans/{banId}:
    parameters:
      - $ref: '#/components/parameters/X-user-session-identifier'
      - $ref: '#/components/parameters/banId'
    delete:
      tags:
        - ban
      summary: remove an user from banlist
      description: |-
        Remove an user from banlist.
        This api is idempotent.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: unbanUser
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: '#/components/responses/200Empty'}
        '401': {$ref: '#/components/responses/401'}
        '415': {$ref: '#/components/responses/415'}
  /likes:
    parameters:
      - $ref: '#/components/parameters/X-user-session-identifier'
      - $ref: '#/components/parameters/photoIdQueryParam'
    get:
      tags:
        - like
      summary: find all likes relation
      description: |-
        recover all the like relations available, it can be filtered by photo
      responses:
        '200': {$ref: '#/components/responses/200Likes'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
    post:
      tags:
        - like
      summary: like a user photo
      description: |-
        Like a photo a user (if both the user and the photo exist). 
        This api is idempotent.
        If the API succeed, the newly (or previously created) "Like" object is responded to the client.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: likePhoto
      security:
        - bearerAuth: []
      requestBody:
        description: The user that issue a like on the photo of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeRequest'
      responses:
        '201': {$ref: '#/components/responses/201Like'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
  /likes/{likeId}:
    parameters:
      - $ref: '#/components/parameters/X-user-session-identifier'
      - $ref: '#/components/parameters/photoIdQueryParam'
      - $ref: '#/components/parameters/likeId'
    delete:
      tags:
        - like
      summary: remove a like to a photo of a user
      description: |-
        Remove the "Like" from  a user photo. 
        This api is idempotent.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: unlikePhoto
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: '#/components/responses/200Empty'}
        '401': {$ref: '#/components/responses/401'}
        '415': {$ref: '#/components/responses/415'}
  /comments:
    parameters:
      - $ref: '#/components/parameters/X-user-session-identifier'
      - $ref: '#/components/parameters/photoIdQueryParam'
    get:
      tags:
        - comment
      summary: find all comment relation
      description: |-
        recover all the comments available, it can be filtered by photo
      responses:
        '200': {$ref: '#/components/responses/200Comments'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
    post:
      tags:
        - comment
      summary: add a comment to a photo of a user
      description: |-
        Comment a user photo.
        If the API succeed, the newly "Comment" object is responded to the client.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: commentPhoto
      security:
        - bearerAuth: []
      requestBody:
        description: The user that issue a like on the photo of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '201': {$ref: '#/components/responses/201Comment'}
        '401': {$ref: '#/components/responses/401'}
        '404': {$ref: '#/components/responses/404'}
        '415': {$ref: '#/components/responses/415'}
  /comments/{commentId}:
    parameters:
      - $ref: '#/components/parameters/X-user-session-identifier'
      - $ref: '#/components/parameters/photoIdQueryParam'
      - $ref: '#/components/parameters/commentId'
    delete:
      tags:
        - comment
      summary: remove a comment to a photo of a user
      description: |-
        Remove a Comment from a user photo.
        The requestor may not have the grant to invoke this api.
        Only json media type is supported.
      operationId: uncommentPhoto
      security:
        - bearerAuth: []
      responses:
        '200': {$ref: '#/components/responses/200Empty'}
        '401': {$ref: '#/components/responses/401'}
        '415': {$ref: '#/components/responses/415'}

components:
  parameters:
    usernamePathParam:
      in: path
      name: username
      description: |-
        the username of the user to retrieve
      required: true
      schema:
        description: |-
          the username of the user to retrieve
        type: string
        pattern:  '^[a-zA-Z0-9_.-]*$'
        example:  |-
          theUserName
        minLength: 3
        maxLength: 16
    usernameQueryParam:
      in: query
      name: username
      description: |-
        the username of the user to retrieve
      required: true
      schema:
        description: |-
          the username of the user to retrieve
        type: string
        pattern:  '^[a-zA-Z0-9_.-]*$'
        example:  |-
          theUserName
        minLength: 3
        maxLength: 16
    X-user-session-identifier:
      in: header
      name: X-user-session-identifier
      description: |-
        session identifier
      schema:
        description: |-
          session identifier
        type: string
        pattern:  '^[a-zA-Z0-9_.-]*$'
        minLength: 3
        maxLength: 180
        example:  |-
          theUserName
    photoIdPathParam:
      in: path
      name: photoId
      description: |-
        the photo id
      required: true
      schema:
        description: |-
          photo id
        type: string
        pattern:  '^[a-zA-Z0-9_.-]*$'
        minLength: 1
        maxLength: 32
        example: |-
          10
    photoIdQueryParam:
      in: query
      name: photoId
      description: |-
        the photo id
      required: true
      schema:
        description: |-
          photo id
        type: string
        pattern:  '^[a-zA-Z0-9_.-]*$'
        minLength: 1
        maxLength: 32
        example: |-
          10
    followId:
      in: path
      name: followId
      description: |-
        the follow id to be deleted
      required: true
      schema:
        description: |-
          follow id
        type: string
        pattern:  '^[a-zA-Z0-9_.-]*$'
        example: |-
          10
        minLength: 1
        maxLength: 32
    banId:
      in: path
      name: banId
      description: |-
        the ban id to be deleted
      required: true
      schema:
        type: string
        pattern:  '^[a-zA-Z0-9_.-]*$'
        minLength: 1
        maxLength: 32
        example: |-
          10
    likeId:
      in: path
      name: likeId
      description: |-
        the like id
      required: true
      schema:
        type: string
        pattern:  '^[a-zA-Z0-9_.-]*$'
        minLength: 1
        maxLength: 32
        example: |-
          10
    commentId:
      in: path
      name: commentId
      description: the comment id
      required: true
      schema:
        type: string
        pattern:  '^[a-zA-Z0-9_.-]*$'
        minLength: 1
        maxLength: 32
        example: |-
          10
  schemas:
    User:
      description: it represents a user of the WASAPhoto Social Network
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.User
      properties:
        username:
          description: the username of the user, it is unique
          type: string
          pattern: '^[a-zA-Z0-9_.-]*$'
          example: |-
            theUser
          minLength: 3
          maxLength: 16
      type: object
    Followee:
      description: it represents a followed user
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Followee
      properties:
        username:
          description: |-
            the username of the user, it is unique
          type: string
          example: |-
            theFollowedUser
          pattern: '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 16
      type: object
    Banned:
      description: Schema representing a banned user.
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Banned
      properties:
        username:
          description: |-
            the username of the user, it is unique
          type: string
          example: |-
            theBanneduser
          pattern: '^[a-zA-Z0-9_.-]*$'
          minLength: 3
          maxLength: 180
      type: object
    Photo:
      description: it represents a photo uploaded by a user
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Photo
      properties:
        id:
          description: |-
            the photo id
          type: integer
          format: int64
          example: 1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        likes:
          description: the likes received for this photo
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Like'
        comments:
          description: the comments received for this photo
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Comment'
        data:
          description: base64 data photo
          pattern:  '^[a-zA-Z0-9_.-]*$'
          example: |-
            iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAB
          type: string
        uploadDate:
          description: the upload date for this photo
          pattern: '^[A-Z0-9:-]*$'
          example: |-
            2017-07-21T17:32:28Z
          type: string
          format: date-time
          minLength: 20
          maxLength: 20
      type: object
    Profile:
      description: it represents the profile data of user. It contains not public informations
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Profile
      properties:
        id:
          description: the profile id
          type: integer
          format: int64
          example: 1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        photos:
          description: the photos of the user
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Photo'
        followees:
          description: the users that follows the user
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Follow'
        followers:
          description: the user's followers
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Follow'
      type: object
    UserHomePage:
      description: it represents the data . It contains not public informations
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.UserHomePage
      properties:
        id:
          description: the homepage id
          type: integer
          format: int64
          example: 1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        photos:
          description: the photos beloning to the user's followees
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Photo'
        followees:
          description: the user followees
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: '#/components/schemas/Follow'
      type: object
    Like:
      description: |-
        the like object
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Like
      properties:
        id:
          description: the like id
          type: integer
          format: int64
          example: 2345
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        photoId:
          description: the photo id
          type: integer
          format: int64
          example: 2345
          minimum: 1
          maximum: 999999
      type: object
    LikeRequest:
      description: |-
        the like request sent to put a like
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.LikeRequest
      properties:
        user:
          $ref: '#/components/schemas/User'
        photoId:
          description: the photo id
          type: integer
          format: int64
          example: 2345
          minimum: 1
          maximum: 999999
      type: object
    Comment:
      description: |-
        the comment object
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Comment
      properties:
        id:
          description: the comment id
          type: integer
          format: int64
          example: 2345
          minimum: 1
          maximum: 999999
        text:
          description: the comment itself
          type: string
          pattern: '^[a-zA-Z0-9_.?!,. -]*$'
          minLength: 1
          maxLength: 999
          example: |-
            U R GORGEOUS!
        user:
          $ref: '#/components/schemas/User'
        photoId:
          description: photo id
          type: integer
          format: int64
          example: 2345
          minimum: 1
          maximum: 999999
      type: object
    CommentRequest:
      description: |-
        the comment object
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.CommentRequest
      properties:
        text:
          description: the comment itself
          type: string
          pattern: '^[a-zA-Z0-9_.?!,. -]*$'
          minLength: 1
          maxLength: 999
          example: |-
            U R GORGEOUS!
        user:
          $ref: '#/components/schemas/User'
        photoId:
          description: photo id
          type: integer
          format: int64
          example: 2345
          minimum: 1
          maximum: 999999
      type: object
    Ban:
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Ban
      description: it represents a Ban, a user banning another user
      properties:
        id:
          description: the ban id
          type: integer
          format: int64
          example: 1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        banned:
          $ref: '#/components/schemas/Banned'
      type: object
    BanRequest:
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.BanRequest
      description: it represents a Ban, a user banning another user
      properties:
        id:
          description: the ban id
          type: integer
          format: int64
          example: 1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        banned:
          $ref: '#/components/schemas/Banned'
      type: object
    Follow:
      description: it represents a Follow, a user following another user
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.Follow
      properties:
        id:
          description: the follow id
          type: integer
          format: int64
          example: 1234
          minimum: 1
          maximum: 999999
        user:
          $ref: '#/components/schemas/User'
        followee:
          $ref: '#/components/schemas/Followee'
      type: object
    FollowRequest:
      description: it represents a Follow, a user following another user
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.FollowRequest
      properties:
        user:
          $ref: '#/components/schemas/User'
        followee:
          $ref: '#/components/schemas/Followee'
      type: object
    EmptyReponse:
      description: it represents an empty response, used for delete api
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.EmptyResponse
      type: object
    ApiError:
      description: it represents the response used in case of errors
      x-swagger-router-model: it.uniroma1.wasa.venieromerlini.model.ApiError
      properties:
        id:
          description: the error code
          type: integer
          format: int64
          enum:
            - 400
            - 401
            - 404
            - 405
            - 415
        message:
          description: |-
            message error
          type: string
          example: |-
            error!
      type: object
    SuccessfulLogin:
      description: the success log response
      type: object
      properties:
        identifier:
          # change here if you decide to use an integer
          # or any other type of identifier
          description: |-
            identifier
          type: string
          minLength: 3
          maxLength: 16
          example: |-
            abcdef012345
  responses:
    '200Photo':
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Photo'
    '200UserHomePage':
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserHomePage'
    '200Profile':
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Profile'
    '200Empty':
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmptyReponse'
    '200Photos':
      description: ok
      content:
        application/json:
          schema:
            description:  |-
              photos returned from the server
            type: array
            minItems: 0
            maxItems: 999999
            items:
              $ref: '#/components/schemas/Photo'
    '200Bans':
      description: ok
      content:
        application/json:
          schema:
            description:  |-
              Bans returned from the server
            type: array
            minItems: 0
            maxItems: 999999
            items:
              $ref: '#/components/schemas/Ban'
    '200Likes':
      description: ok
      content:
        application/json:
          schema:
            description:  |-
              Likes returned from the server
            type: array
            minItems: 0
            maxItems: 999999
            items:
              $ref: '#/components/schemas/Like'
    '200Follows':
      description: ok
      content:
        application/json:
          schema:
            description:  |-
              follows relation returned from the server
            type: array
            minItems: 0
            maxItems: 999999
            items:
              $ref: '#/components/schemas/Follow'
    '200Comments':
      description: ok
      content:
        application/json:
          schema:
            description:  |-
              Comments relation returned from the server
            type: array
            minItems: 0
            maxItems: 999999
            items:
              $ref: '#/components/schemas/Comment'
    '200Users':
      description: ok
      content:
        application/json:
          schema:
            description:  |-
              users returned from the server
            type: array
            minItems: 0
            maxItems: 999999
            items:
              $ref: '#/components/schemas/User'
    '201Ban':
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ban'
    '201Photo':
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Photo'
    '201Follow':
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Follow'
    '201Like':
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Like'
    '201Comment':
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'
    '401':
      description: Not Authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    '404':
      description: Not found
      # this error could happen if either the user or the photo have been canceled before invoking this api
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    '405':
      description: Method Not Allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    '415':
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT